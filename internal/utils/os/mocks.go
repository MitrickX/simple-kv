// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package os

import (
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewMockFile creates a new instance of MockFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFile {
	mock := &MockFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFile is an autogenerated mock type for the File type
type MockFile struct {
	mock.Mock
}

type MockFile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFile) EXPECT() *MockFile_Expecter {
	return &MockFile_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockFile
func (_mock *MockFile) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFile_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockFile_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockFile_Expecter) Close() *MockFile_Close_Call {
	return &MockFile_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockFile_Close_Call) Run(run func()) *MockFile_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Close_Call) Return(err error) *MockFile_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFile_Close_Call) RunAndReturn(run func() error) *MockFile_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockFile
func (_mock *MockFile) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockFile_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockFile_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockFile_Expecter) Name() *MockFile_Name_Call {
	return &MockFile_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockFile_Name_Call) Run(run func()) *MockFile_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Name_Call) Return(s string) *MockFile_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockFile_Name_Call) RunAndReturn(run func() string) *MockFile_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function for the type MockFile
func (_mock *MockFile) Sync() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFile_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockFile_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
func (_e *MockFile_Expecter) Sync() *MockFile_Sync_Call {
	return &MockFile_Sync_Call{Call: _e.mock.On("Sync")}
}

func (_c *MockFile_Sync_Call) Run(run func()) *MockFile_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Sync_Call) Return(err error) *MockFile_Sync_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFile_Sync_Call) RunAndReturn(run func() error) *MockFile_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockFile
func (_mock *MockFile) Write(b []byte) (int, error) {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(b)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(b)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFile_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockFile_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - b []byte
func (_e *MockFile_Expecter) Write(b interface{}) *MockFile_Write_Call {
	return &MockFile_Write_Call{Call: _e.mock.On("Write", b)}
}

func (_c *MockFile_Write_Call) Run(run func(b []byte)) *MockFile_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFile_Write_Call) Return(n int, err error) *MockFile_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_Write_Call) RunAndReturn(run func(b []byte) (int, error)) *MockFile_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOS creates a new instance of MockOS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOS {
	mock := &MockOS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOS is an autogenerated mock type for the OS type
type MockOS struct {
	mock.Mock
}

type MockOS_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOS) EXPECT() *MockOS_Expecter {
	return &MockOS_Expecter{mock: &_m.Mock}
}

// OpenFile provides a mock function for the type MockOS
func (_mock *MockOS) OpenFile(name string, flag int, perm os.FileMode) (File, error) {
	ret := _mock.Called(name, flag, perm)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, os.FileMode) (File, error)); ok {
		return returnFunc(name, flag, perm)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, os.FileMode) File); ok {
		r0 = returnFunc(name, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, os.FileMode) error); ok {
		r1 = returnFunc(name, flag, perm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOS_OpenFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenFile'
type MockOS_OpenFile_Call struct {
	*mock.Call
}

// OpenFile is a helper method to define mock.On call
//   - name string
//   - flag int
//   - perm os.FileMode
func (_e *MockOS_Expecter) OpenFile(name interface{}, flag interface{}, perm interface{}) *MockOS_OpenFile_Call {
	return &MockOS_OpenFile_Call{Call: _e.mock.On("OpenFile", name, flag, perm)}
}

func (_c *MockOS_OpenFile_Call) Run(run func(name string, flag int, perm os.FileMode)) *MockOS_OpenFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 os.FileMode
		if args[2] != nil {
			arg2 = args[2].(os.FileMode)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOS_OpenFile_Call) Return(file File, err error) *MockOS_OpenFile_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockOS_OpenFile_Call) RunAndReturn(run func(name string, flag int, perm os.FileMode) (File, error)) *MockOS_OpenFile_Call {
	_c.Call.Return(run)
	return _c
}
