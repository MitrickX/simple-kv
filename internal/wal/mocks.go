// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package wal

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockWAL creates a new instance of MockWAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWAL {
	mock := &MockWAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWAL is an autogenerated mock type for the WAL type
type MockWAL struct {
	mock.Mock
}

type MockWAL_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWAL) EXPECT() *MockWAL_Expecter {
	return &MockWAL_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function for the type MockWAL
func (_mock *MockWAL) Flush() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWAL_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockWAL_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockWAL_Expecter) Flush() *MockWAL_Flush_Call {
	return &MockWAL_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockWAL_Flush_Call) Run(run func()) *MockWAL_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWAL_Flush_Call) Return(err error) *MockWAL_Flush_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWAL_Flush_Call) RunAndReturn(run func() error) *MockWAL_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockWAL
func (_mock *MockWAL) Write(query string) error {
	ret := _mock.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(query)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWAL_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockWAL_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - query string
func (_e *MockWAL_Expecter) Write(query interface{}) *MockWAL_Write_Call {
	return &MockWAL_Write_Call{Call: _e.mock.On("Write", query)}
}

func (_c *MockWAL_Write_Call) Run(run func(query string)) *MockWAL_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWAL_Write_Call) Return(err error) *MockWAL_Write_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWAL_Write_Call) RunAndReturn(run func(query string) error) *MockWAL_Write_Call {
	_c.Call.Return(run)
	return _c
}
